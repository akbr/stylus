{"mappings":"AAAA,cAAqB;IAAE,CAAC,GAAG,EAAE,MAAM,GAAG,MAAM,GAAG,MAAM,CAAA;CAAE,CAAC;AAExD,mBAA0B,MAAM,GAAG;IACjC,SAAS,CAAC,EAAE,IAAI,CAAC;CAClB,CAAC;AAEF,wBAA+B,wBAAwB,CAAC;AAExD;IACE,IAAI,EAAE,MAAM,IAAI,CAAC;IACjB,QAAQ,EAAE,OAAO,CAAC,GAAG,CAAC,CAAC;CACxB;AEJD,sBAAsB,EAAE,EAAE,WAAW,EAAE,MAAM,EAAE,WAAW,GAAG,IAAI,CAAC;AAClE,sBACE,EAAE,EAAE,WAAW,EACf,MAAM,EAAE,WAAW,EACnB,gBAAgB,EAAE,gBAAgB,GACjC,QAAQ,CAAC","sources":["src/src/types.ts","src/src/transforms.ts","src/src/index.ts","src/index.ts"],"sourcesContent":[null,null,null,"import type { InputStyles, Styles, AnimationOptions, Controls } from \"./types\";\nimport { handleTransforms } from \"./transforms\";\n\nfunction applyStyles(styles: Styles, el: HTMLElement) {\n  Object.entries(styles).forEach(([key, value]) => (el.style[key] = value));\n}\n\nexport function style(el: HTMLElement, styles: InputStyles): void;\nexport function style(\n  el: HTMLElement,\n  styles: InputStyles,\n  animationOptions: AnimationOptions\n): Controls;\n\nexport function style(\n  el: HTMLElement,\n  styles: Styles,\n  animationOptions?: AnimationOptions\n): void | Controls {\n  const modStyles = handleTransforms(styles, el.style.transform);\n\n  if (!animationOptions) {\n    applyStyles(modStyles, el);\n    return;\n  }\n\n  const animation = el.animate(modStyles, animationOptions);\n\n  animation.finished.then(() => {\n    applyStyles(modStyles, el);\n  });\n\n  return {\n    skip: () => animation.finish(),\n    finished: animation.finished,\n  };\n}\n"],"names":[],"version":3,"file":"types.d.ts.map"}