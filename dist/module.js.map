{"mappings":"ACEA,KAAK,CAAC,gCAAU;IACd,CAAC;QACC,IAAI,GAAE,UAAY;QAClB,IAAI,GAAG,GAAoB,UAClB,GAAG,MAAK,MAAQ,IAAG,GAAG,MAAM,GAAG,CAAC,EAAE;;IAE7C,CAAC;QACC,IAAI,GAAE,UAAY;QAClB,IAAI,GAAG,GAAoB,UAClB,GAAG,MAAK,MAAQ,IAAG,GAAG,MAAM,GAAG,CAAC,EAAE;;IAE7C,KAAK;QACH,IAAI,GAAE,KAAO;QACb,IAAI,GAAG,GAAW,GAAK,GAAG;;IAE5B,MAAM;QACJ,IAAI,GAAE,MAAQ;QACd,IAAI,GAAG,GAAW,MAAQ,GAAG,CAAC,GAAG;;;SAI5B,uCAAiB,CAAC,MAAmB,EAAE,CAAC;IAC/C,KAAK,CAAC,UAAU;;IAChB,KAAK,CAAC,UAAU;;IAChB,MAAM,CAAC,OAAO,CAAC,MAAM,EAAE,OAAO,GAAG,GAAG,EAAE,KAAK,IAAM,CAAC;QAChD,gCAAU,CAAC,GAAG,IACT,UAAU,CAAC,gCAAU,CAAC,GAAG,EAAE,IAAI,IAAI,gCAAU,CAAC,GAAG,EAAE,IAAI,CAAC,KAAK,IAC7D,UAAU,CAAC,GAAG,IAAI,KAAK;IAC9B,CAAC;;QACO,UAAU;QAAE,UAAU;;AAChC,CAAC;AAED,KAAK,CAAC,yBAAG;SACO,yCAAoB,CAAC,WAAmB,EAAE,CAAC;IACzD,GAAG,CAAC,UAAU;;IACd,GAAG,CAAC,CAAC;UACG,CAAC,GAAG,yBAAG,CAAC,IAAI,CAAC,WAAW,EAAI,UAAU,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;WACnD,UAAU;AACnB,CAAC;SAEe,yCAAgB,CAC9B,MAAmB,EACnB,gBAAwB,EACxB,CAAC;IACD,GAAG,CAAC,iBAAiB,GAAG,yCAAoB,CAAC,gBAAgB;IAC7D,GAAG,EAAE,mBAAmB,EAAE,SAAS,IAAI,uCAAiB,CAAC,MAAM;IAE/D,GAAG,CAAC,KAAK;WACJ,iBAAiB;WACjB,mBAAmB;;IAGxB,GAAG,CAAC,aAAa,GAAG,MAAM,CAAC,MAAM,CAAC,gCAAU,EACzC,GAAG,UAAI,IAAI,MAAQ,KAAK,CAAC,IAAI,OAAO,IAAI,CAAC,CAAC,EAAE,KAAK,CAAC,IAAI,EAAE,CAAC,IAAI,KAAK;MAClE,MAAM,EAAE,CAAC,GAAK,CAAC;MACf,IAAI,EAAC,CAAG;IAEX,SAAS,CAAC,SAAS,GAAG,aAAa;WAE5B,SAAS;AAClB,CAAC;;;SD3DQ,iCAAW,CAAC,MAAc,EAAE,EAAe,EAAE,CAAC;IACrD,MAAM,CAAC,OAAO,CAAC,MAAM,EAAE,OAAO,GAAG,GAAG,EAAE,KAAK,IAAO,EAAE,CAAC,KAAK,CAAC,GAAG,IAAI,KAAK;;AACzE,CAAC;SASe,yCAAK,CACnB,EAAe,EACf,MAAc,EACd,gBAAmC,EAClB,CAAC;IAClB,KAAK,CAAC,SAAS,GAAG,yCAAgB,CAAC,MAAM,EAAE,EAAE,CAAC,KAAK,CAAC,SAAS;IAE7D,EAAE,GAAG,gBAAgB,EAAE,CAAC;QACtB,iCAAW,CAAC,SAAS,EAAE,EAAE;;IAE3B,CAAC;IAED,KAAK,CAAC,SAAS,GAAG,EAAE,CAAC,OAAO,CAAC,SAAS,EAAE,gBAAgB;IAExD,SAAS,CAAC,QAAQ,CAAC,IAAI,KAAO,CAAC;QAC7B,iCAAW,CAAC,SAAS,EAAE,EAAE;IAC3B,CAAC;;QAGC,IAAI,MAAQ,SAAS,CAAC,MAAM;;QAC5B,QAAQ,EAAE,SAAS,CAAC,QAAQ;;AAEhC,CAAC","sources":["src/index.ts","src/transforms.ts"],"sourcesContent":["import type { InputStyles, Styles, AnimationOptions, Controls } from \"./types\";\nimport { handleTransforms } from \"./transforms\";\n\nfunction applyStyles(styles: Styles, el: HTMLElement) {\n  Object.entries(styles).forEach(([key, value]) => (el.style[key] = value));\n}\n\nexport function style(el: HTMLElement, styles: InputStyles): void;\nexport function style(\n  el: HTMLElement,\n  styles: InputStyles,\n  animationOptions: AnimationOptions\n): Controls;\n\nexport function style(\n  el: HTMLElement,\n  styles: Styles,\n  animationOptions?: AnimationOptions\n): void | Controls {\n  const modStyles = handleTransforms(styles, el.style.transform);\n\n  if (!animationOptions) {\n    applyStyles(modStyles, el);\n    return;\n  }\n\n  const animation = el.animate(modStyles, animationOptions);\n\n  animation.finished.then(() => {\n    applyStyles(modStyles, el);\n  });\n\n  return {\n    skip: () => animation.finish(),\n    finished: animation.finished,\n  };\n}\n","import type { InputStyles, Styles } from \"./types\";\n\nconst shorthands = {\n  x: {\n    name: \"translateX\",\n    unit: (val: number | string) =>\n      typeof val === \"string\" ? val : `${val}px`,\n  },\n  y: {\n    name: \"translateY\",\n    unit: (val: number | string) =>\n      typeof val === \"string\" ? val : `${val}px`,\n  },\n  scale: {\n    name: \"scale\",\n    unit: (val: number) => val,\n  },\n  rotate: {\n    name: \"rotate\",\n    unit: (val: number) => `${val}deg`,\n  },\n};\n\nfunction extractShorthands(styles: InputStyles) {\n  const transforms: InputStyles = {};\n  const restStyles: Styles = {};\n  Object.entries(styles).forEach(([key, value]) => {\n    shorthands[key]\n      ? (transforms[shorthands[key].name] = shorthands[key].unit(value))\n      : (restStyles[key] = value);\n  });\n  return [transforms, restStyles] as const;\n}\n\nconst reg = /(\\w+)\\(([^)]*)\\)/g;\nexport function parseTransformString(tranformStr: string) {\n  let transforms: InputStyles = {};\n  let m: RegExpExecArray;\n  while ((m = reg.exec(tranformStr))) transforms[m[1]] = m[2];\n  return transforms;\n}\n\nexport function handleTransforms(\n  styles: InputStyles,\n  currentTransform: string\n) {\n  let currentTransforms = parseTransformString(currentTransform);\n  let [shorthandTransforms, modStyles] = extractShorthands(styles);\n\n  let combo = {\n    ...currentTransforms,\n    ...shorthandTransforms,\n  };\n\n  let orderedString = Object.values(shorthands)\n    .map(({ name }) => (combo[name] ? `${name}(${combo[name]})` : false))\n    .filter((x) => x)\n    .join(\" \");\n\n  modStyles.transform = orderedString;\n\n  return modStyles;\n}\n"],"names":[],"version":3,"file":"module.js.map"}